// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotel/hotel.proto

package hotel

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	address "github.com/nekizz/final-project/backend/go-pbtype/address"
	comment "github.com/nekizz/final-project/backend/go-pbtype/comment"
	image "github.com/nekizz/final-project/backend/go-pbtype/image"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hotel struct {
	Id                   int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StarLevel            int32              `protobuf:"varint,3,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"`
	IsAvailable          bool               `protobuf:"varint,4,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	Rate                 float32            `protobuf:"fixed32,5,opt,name=rate,proto3" json:"rate,omitempty"`
	Description          string             `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt            string             `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string             `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AddressId            int32              `protobuf:"varint,12,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	CustomerId           int32              `protobuf:"varint,13,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Address              *address.Address   `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	ListImage            []*image.Image     `protobuf:"bytes,11,rep,name=list_image,json=listImage,proto3" json:"list_image,omitempty"`
	ListComment          []*comment.Comment `protobuf:"bytes,14,rep,name=list_comment,json=listComment,proto3" json:"list_comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Hotel) Reset()         { *m = Hotel{} }
func (m *Hotel) String() string { return proto.CompactTextString(m) }
func (*Hotel) ProtoMessage()    {}
func (*Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{0}
}
func (m *Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hotel.Merge(m, src)
}
func (m *Hotel) XXX_Size() int {
	return m.Size()
}
func (m *Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_Hotel proto.InternalMessageInfo

func (m *Hotel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hotel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hotel) GetStarLevel() int32 {
	if m != nil {
		return m.StarLevel
	}
	return 0
}

func (m *Hotel) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

func (m *Hotel) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *Hotel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Hotel) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Hotel) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Hotel) GetAddressId() int32 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *Hotel) GetCustomerId() int32 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *Hotel) GetAddress() *address.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Hotel) GetListImage() []*image.Image {
	if m != nil {
		return m.ListImage
	}
	return nil
}

func (m *Hotel) GetListComment() []*comment.Comment {
	if m != nil {
		return m.ListComment
	}
	return nil
}

func (*Hotel) XXX_MessageName() string {
	return "hotel.Hotel"
}

type OneHotelRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneHotelRequest) Reset()         { *m = OneHotelRequest{} }
func (m *OneHotelRequest) String() string { return proto.CompactTextString(m) }
func (*OneHotelRequest) ProtoMessage()    {}
func (*OneHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{1}
}
func (m *OneHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneHotelRequest.Merge(m, src)
}
func (m *OneHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *OneHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OneHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OneHotelRequest proto.InternalMessageInfo

func (m *OneHotelRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*OneHotelRequest) XXX_MessageName() string {
	return "hotel.OneHotelRequest"
}

type ListHotelRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	SearchField          string   `protobuf:"bytes,7,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,8,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	CustomerId           uint32   `protobuf:"varint,9,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Location             string   `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	RoomType             string   `protobuf:"bytes,12,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
	CheckIn              string   `protobuf:"bytes,13,opt,name=check_in,json=checkIn,proto3" json:"check_in,omitempty"`
	Checkout             string   `protobuf:"bytes,14,opt,name=checkout,proto3" json:"checkout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelRequest) Reset()         { *m = ListHotelRequest{} }
func (m *ListHotelRequest) String() string { return proto.CompactTextString(m) }
func (*ListHotelRequest) ProtoMessage()    {}
func (*ListHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{2}
}
func (m *ListHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelRequest.Merge(m, src)
}
func (m *ListHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelRequest proto.InternalMessageInfo

func (m *ListHotelRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListHotelRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListHotelRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListHotelRequest) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListHotelRequest) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (m *ListHotelRequest) GetCustomerId() uint32 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *ListHotelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListHotelRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ListHotelRequest) GetRoomType() string {
	if m != nil {
		return m.RoomType
	}
	return ""
}

func (m *ListHotelRequest) GetCheckIn() string {
	if m != nil {
		return m.CheckIn
	}
	return ""
}

func (m *ListHotelRequest) GetCheckout() string {
	if m != nil {
		return m.Checkout
	}
	return ""
}

func (*ListHotelRequest) XXX_MessageName() string {
	return "hotel.ListHotelRequest"
}

type ListHotelCustomerRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Location             string   `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	RoomType             string   `protobuf:"bytes,12,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
	CheckIn              string   `protobuf:"bytes,13,opt,name=check_in,json=checkIn,proto3" json:"check_in,omitempty"`
	Checkout             string   `protobuf:"bytes,14,opt,name=checkout,proto3" json:"checkout,omitempty"`
	StarLevel            string   `protobuf:"bytes,15,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelCustomerRequest) Reset()         { *m = ListHotelCustomerRequest{} }
func (m *ListHotelCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*ListHotelCustomerRequest) ProtoMessage()    {}
func (*ListHotelCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{3}
}
func (m *ListHotelCustomerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelCustomerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelCustomerRequest.Merge(m, src)
}
func (m *ListHotelCustomerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelCustomerRequest proto.InternalMessageInfo

func (m *ListHotelCustomerRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListHotelCustomerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelCustomerRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetRoomType() string {
	if m != nil {
		return m.RoomType
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetCheckIn() string {
	if m != nil {
		return m.CheckIn
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetCheckout() string {
	if m != nil {
		return m.Checkout
	}
	return ""
}

func (m *ListHotelCustomerRequest) GetStarLevel() string {
	if m != nil {
		return m.StarLevel
	}
	return ""
}

func (*ListHotelCustomerRequest) XXX_MessageName() string {
	return "hotel.ListHotelCustomerRequest"
}

type ListHotelByIDRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	SearchField          string   `protobuf:"bytes,7,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,8,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	ListHotelId          []int32  `protobuf:"varint,9,rep,packed,name=list_hotel_id,json=listHotelId,proto3" json:"list_hotel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelByIDRequest) Reset()         { *m = ListHotelByIDRequest{} }
func (m *ListHotelByIDRequest) String() string { return proto.CompactTextString(m) }
func (*ListHotelByIDRequest) ProtoMessage()    {}
func (*ListHotelByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{4}
}
func (m *ListHotelByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelByIDRequest.Merge(m, src)
}
func (m *ListHotelByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelByIDRequest proto.InternalMessageInfo

func (m *ListHotelByIDRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListHotelByIDRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelByIDRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListHotelByIDRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListHotelByIDRequest) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListHotelByIDRequest) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (m *ListHotelByIDRequest) GetListHotelId() []int32 {
	if m != nil {
		return m.ListHotelId
	}
	return nil
}

func (*ListHotelByIDRequest) XXX_MessageName() string {
	return "hotel.ListHotelByIDRequest"
}

type ListHotelResponse struct {
	Items                []*Hotel `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MaxPage              uint32   `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	TotalCount           uint32   `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page                 uint32   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchField          string   `protobuf:"bytes,6,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,7,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelResponse) Reset()         { *m = ListHotelResponse{} }
func (m *ListHotelResponse) String() string { return proto.CompactTextString(m) }
func (*ListHotelResponse) ProtoMessage()    {}
func (*ListHotelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{5}
}
func (m *ListHotelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelResponse.Merge(m, src)
}
func (m *ListHotelResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelResponse proto.InternalMessageInfo

func (m *ListHotelResponse) GetItems() []*Hotel {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListHotelResponse) GetMaxPage() uint32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *ListHotelResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListHotelResponse) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListHotelResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelResponse) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListHotelResponse) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListHotelResponse) XXX_MessageName() string {
	return "hotel.ListHotelResponse"
}

type ListAllHotelWithFilter struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Location             string   `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	CheckIn              string   `protobuf:"bytes,9,opt,name=check_in,json=checkIn,proto3" json:"check_in,omitempty"`
	CheckOut             string   `protobuf:"bytes,10,opt,name=check_out,json=checkOut,proto3" json:"check_out,omitempty"`
	RoomType             string   `protobuf:"bytes,11,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAllHotelWithFilter) Reset()         { *m = ListAllHotelWithFilter{} }
func (m *ListAllHotelWithFilter) String() string { return proto.CompactTextString(m) }
func (*ListAllHotelWithFilter) ProtoMessage()    {}
func (*ListAllHotelWithFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f428b8061aeb204, []int{6}
}
func (m *ListAllHotelWithFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAllHotelWithFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAllHotelWithFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAllHotelWithFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllHotelWithFilter.Merge(m, src)
}
func (m *ListAllHotelWithFilter) XXX_Size() int {
	return m.Size()
}
func (m *ListAllHotelWithFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllHotelWithFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllHotelWithFilter proto.InternalMessageInfo

func (m *ListAllHotelWithFilter) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListAllHotelWithFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListAllHotelWithFilter) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetCheckIn() string {
	if m != nil {
		return m.CheckIn
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetCheckOut() string {
	if m != nil {
		return m.CheckOut
	}
	return ""
}

func (m *ListAllHotelWithFilter) GetRoomType() string {
	if m != nil {
		return m.RoomType
	}
	return ""
}

func (*ListAllHotelWithFilter) XXX_MessageName() string {
	return "hotel.ListAllHotelWithFilter"
}
func init() {
	proto.RegisterType((*Hotel)(nil), "hotel.Hotel")
	golang_proto.RegisterType((*Hotel)(nil), "hotel.Hotel")
	proto.RegisterType((*OneHotelRequest)(nil), "hotel.OneHotelRequest")
	golang_proto.RegisterType((*OneHotelRequest)(nil), "hotel.OneHotelRequest")
	proto.RegisterType((*ListHotelRequest)(nil), "hotel.ListHotelRequest")
	golang_proto.RegisterType((*ListHotelRequest)(nil), "hotel.ListHotelRequest")
	proto.RegisterType((*ListHotelCustomerRequest)(nil), "hotel.ListHotelCustomerRequest")
	golang_proto.RegisterType((*ListHotelCustomerRequest)(nil), "hotel.ListHotelCustomerRequest")
	proto.RegisterType((*ListHotelByIDRequest)(nil), "hotel.ListHotelByIDRequest")
	golang_proto.RegisterType((*ListHotelByIDRequest)(nil), "hotel.ListHotelByIDRequest")
	proto.RegisterType((*ListHotelResponse)(nil), "hotel.ListHotelResponse")
	golang_proto.RegisterType((*ListHotelResponse)(nil), "hotel.ListHotelResponse")
	proto.RegisterType((*ListAllHotelWithFilter)(nil), "hotel.ListAllHotelWithFilter")
	golang_proto.RegisterType((*ListAllHotelWithFilter)(nil), "hotel.ListAllHotelWithFilter")
}

func init() { proto.RegisterFile("hotel/hotel.proto", fileDescriptor_9f428b8061aeb204) }
func init() { golang_proto.RegisterFile("hotel/hotel.proto", fileDescriptor_9f428b8061aeb204) }

var fileDescriptor_9f428b8061aeb204 = []byte{
	// 1105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcf, 0x6e, 0xdc, 0x44,
	0x18, 0x97, 0x37, 0xd9, 0x3f, 0x1e, 0x6f, 0x9a, 0x74, 0x08, 0xc1, 0x6c, 0xda, 0xcd, 0xc6, 0x42,
	0xb0, 0x0a, 0x64, 0x5d, 0xd2, 0x03, 0x52, 0xc5, 0x81, 0x4d, 0x42, 0xd3, 0x95, 0x5a, 0x5a, 0x19,
	0x0a, 0x12, 0x17, 0x6b, 0xd6, 0x9e, 0x38, 0x43, 0x6c, 0x8f, 0xb1, 0x67, 0x43, 0xb6, 0x55, 0x2f,
	0x3c, 0x02, 0x7d, 0x03, 0x5e, 0x80, 0x03, 0x2f, 0xc0, 0xb1, 0x47, 0x24, 0x5e, 0x00, 0x25, 0xbc,
	0x01, 0x12, 0x67, 0x34, 0xdf, 0xd8, 0x5b, 0xaf, 0x43, 0x83, 0xda, 0x4b, 0x11, 0x17, 0xcf, 0xcc,
	0xf7, 0x7d, 0xf3, 0x9b, 0xf1, 0xef, 0xf7, 0x7d, 0x33, 0x83, 0xae, 0x1e, 0x71, 0x41, 0x43, 0x1b,
	0xbe, 0x83, 0x24, 0xe5, 0x82, 0xe3, 0x3a, 0x0c, 0x3a, 0xdb, 0x01, 0x13, 0x47, 0x93, 0xf1, 0xc0,
	0xe3, 0x91, 0x1d, 0xf0, 0x80, 0xdb, 0xe0, 0x1d, 0x4f, 0x0e, 0x61, 0x04, 0x03, 0xe8, 0xa9, 0x59,
	0x9d, 0xf5, 0x80, 0xf3, 0x20, 0xa4, 0xcf, 0xa3, 0x68, 0x94, 0x88, 0x69, 0xee, 0xbc, 0x96, 0x3b,
	0x49, 0xc2, 0x6c, 0x12, 0xc7, 0x5c, 0x10, 0xc1, 0x78, 0x9c, 0xe5, 0xde, 0x83, 0xd2, 0x4a, 0x31,
	0x3d, 0x66, 0x8f, 0x1e, 0xd9, 0x87, 0x2c, 0x26, 0xe1, 0x76, 0x92, 0xf2, 0x6f, 0xa8, 0x27, 0xec,
	0x31, 0xf1, 0x8e, 0x69, 0xec, 0xdb, 0x01, 0xdf, 0x4e, 0xc6, 0x62, 0x9a, 0x50, 0x9b, 0xf8, 0x7e,
	0x4a, 0xb3, 0xac, 0x68, 0x73, 0xa0, 0xbd, 0x97, 0x07, 0x62, 0x11, 0x09, 0xf2, 0xef, 0xab, 0xef,
	0xc6, 0xe3, 0x51, 0x44, 0x63, 0x51, 0xb4, 0x39, 0xd0, 0x07, 0xd0, 0x78, 0xdb, 0x01, 0x8d, 0xb7,
	0xb3, 0xef, 0x48, 0x10, 0xd0, 0xd4, 0xe6, 0x09, 0xfc, 0xf8, 0x45, 0x12, 0xac, 0x9f, 0x16, 0x50,
	0xfd, 0x8e, 0x24, 0x1e, 0x5f, 0x41, 0x35, 0xe6, 0x9b, 0x5a, 0x4f, 0xeb, 0xd7, 0x9d, 0x1a, 0xf3,
	0x31, 0x46, 0x8b, 0x31, 0x89, 0xa8, 0x59, 0xeb, 0x69, 0x7d, 0xdd, 0x81, 0x3e, 0xbe, 0x8e, 0x50,
	0x26, 0x48, 0xea, 0x86, 0xf4, 0x84, 0x86, 0xe6, 0x02, 0xc4, 0xea, 0xd2, 0x72, 0x57, 0x1a, 0xf0,
	0x26, 0x6a, 0xb3, 0xcc, 0x25, 0x27, 0x84, 0x85, 0x64, 0x1c, 0x52, 0x73, 0xb1, 0xa7, 0xf5, 0x5b,
	0x8e, 0xc1, 0xb2, 0x61, 0x61, 0x92, 0xa8, 0x29, 0x11, 0xd4, 0xac, 0xf7, 0xb4, 0x7e, 0xcd, 0x81,
	0x3e, 0xee, 0x21, 0xc3, 0xa7, 0x99, 0x97, 0x32, 0xd8, 0xa5, 0xd9, 0x84, 0x05, 0xcb, 0x26, 0xb9,
	0xae, 0x97, 0x52, 0x22, 0xa8, 0xef, 0x12, 0x61, 0xae, 0x42, 0x80, 0x9e, 0x5b, 0x86, 0x42, 0xba,
	0x27, 0x89, 0x5f, 0xb8, 0xdf, 0x54, 0xee, 0xdc, 0xa2, 0xdc, 0xb9, 0x60, 0x2e, 0xf3, 0xcd, 0xb6,
	0xda, 0x75, 0x6e, 0x19, 0xf9, 0x78, 0x03, 0x19, 0xde, 0x24, 0x13, 0x3c, 0xa2, 0xa9, 0xf4, 0x2f,
	0x81, 0x1f, 0x15, 0xa6, 0x91, 0x8f, 0xb7, 0x50, 0x33, 0x8f, 0x36, 0x51, 0x4f, 0xeb, 0x1b, 0x3b,
	0x2b, 0x83, 0x22, 0x01, 0x86, 0xaa, 0x75, 0x8a, 0x00, 0xfc, 0x3e, 0x42, 0x21, 0xcb, 0x84, 0x0b,
	0xd2, 0x9a, 0x46, 0x6f, 0xa1, 0x6f, 0xec, 0xb4, 0x07, 0x4a, 0xe8, 0x91, 0xfc, 0x3a, 0xba, 0xf4,
	0x43, 0x17, 0xdf, 0x44, 0x6d, 0x08, 0xce, 0x05, 0x34, 0xaf, 0x40, 0xf8, 0xca, 0xa0, 0x10, 0x74,
	0x4f, 0xb5, 0x8e, 0x21, 0xa3, 0xf2, 0x81, 0xb5, 0x89, 0x96, 0xef, 0xc7, 0x14, 0x34, 0x73, 0xe8,
	0xb7, 0x13, 0x9a, 0x89, 0x92, 0x74, 0xba, 0x94, 0xce, 0xfa, 0xb3, 0x86, 0x56, 0xee, 0xb2, 0x4c,
	0xcc, 0x05, 0x61, 0xb4, 0x98, 0xc8, 0x3d, 0x49, 0xd5, 0x96, 0x1c, 0xe8, 0xe3, 0x55, 0x54, 0x0f,
	0x59, 0xc4, 0x04, 0x28, 0xb5, 0xe4, 0xa8, 0x01, 0x7e, 0x07, 0x5d, 0x79, 0xce, 0xb6, 0x1b, 0xb1,
	0x18, 0xd4, 0xd2, 0x9d, 0xf6, 0x8c, 0xf1, 0x7b, 0x2c, 0xae, 0x46, 0x91, 0x53, 0xb3, 0x51, 0x8d,
	0x22, 0xa7, 0x32, 0x25, 0x32, 0x4a, 0x52, 0xef, 0xc8, 0x3d, 0x64, 0x34, 0xf4, 0x0b, 0x71, 0x95,
	0xed, 0xb6, 0x34, 0x95, 0x42, 0x4e, 0x48, 0x38, 0xa1, 0x66, 0xab, 0x1c, 0xf2, 0xa5, 0x34, 0x55,
	0x25, 0xd2, 0x61, 0xb7, 0x65, 0x89, 0x8a, 0x64, 0x45, 0xa5, 0x64, 0xed, 0xa0, 0x56, 0xc8, 0x3d,
	0xc8, 0x76, 0xd3, 0x00, 0xfb, 0x6c, 0x8c, 0xd7, 0x91, 0x9e, 0x72, 0x1e, 0xb9, 0xb2, 0x8e, 0x20,
	0x23, 0x74, 0xa7, 0x25, 0x0d, 0x5f, 0x4c, 0x13, 0x8a, 0xdf, 0x46, 0x2d, 0xef, 0x88, 0x7a, 0xc7,
	0x2e, 0x8b, 0x21, 0x1b, 0x74, 0xa7, 0x09, 0xe3, 0x51, 0x2c, 0x31, 0xa1, 0xcb, 0x27, 0x52, 0x2d,
	0x98, 0x56, 0x8c, 0xad, 0x9f, 0x6b, 0xc8, 0x9c, 0xb1, 0xbe, 0x97, 0xef, 0xed, 0xf5, 0xb2, 0xff,
	0x1f, 0xa0, 0xa5, 0x72, 0x66, 0x2c, 0xab, 0xe2, 0x9c, 0x9d, 0x19, 0xd6, 0x5f, 0x1a, 0x5a, 0x9d,
	0xb1, 0xb6, 0x3b, 0x1d, 0xed, 0xff, 0x1f, 0xf2, 0xd5, 0x42, 0x4b, 0x50, 0xd8, 0x70, 0xa5, 0xa9,
	0x8c, 0x5d, 0xe8, 0xd7, 0x55, 0x1d, 0xc3, 0x8f, 0x8e, 0x7c, 0xeb, 0x5c, 0x43, 0x57, 0x4b, 0x45,
	0x9a, 0x25, 0x3c, 0xce, 0xe4, 0xcc, 0x3a, 0x13, 0x34, 0xca, 0x4c, 0x2d, 0x3f, 0x3a, 0xd4, 0x15,
	0xa9, 0x82, 0x94, 0x4b, 0x0a, 0x11, 0x91, 0x53, 0x17, 0xd8, 0xa9, 0x01, 0x11, 0xcd, 0x88, 0x9c,
	0x3e, 0x90, 0x04, 0x6d, 0x20, 0x43, 0x70, 0x41, 0x42, 0xd7, 0xe3, 0x93, 0x58, 0xe4, 0xdc, 0x21,
	0x30, 0xed, 0x49, 0xcb, 0x8c, 0xd5, 0xc5, 0x7f, 0x62, 0xb5, 0x5e, 0x66, 0xb5, 0xca, 0x44, 0xe3,
	0xdf, 0x99, 0x68, 0x5e, 0x60, 0xc2, 0x7a, 0x5a, 0x43, 0x6b, 0xf2, 0x2f, 0x87, 0x61, 0x08, 0xff,
	0xf0, 0x15, 0x13, 0x47, 0xb7, 0x59, 0x28, 0x68, 0xfa, 0x9a, 0x4b, 0xa2, 0xf9, 0x82, 0x92, 0x68,
	0x55, 0x4a, 0xa2, 0x9c, 0xf5, 0xfa, 0x7c, 0xd6, 0xaf, 0x23, 0x5d, 0xb9, 0x64, 0xda, 0xa3, 0x52,
	0xda, 0xdf, 0x9f, 0x88, 0xf9, 0x52, 0x32, 0xe6, 0x4b, 0x69, 0xe7, 0x7c, 0x11, 0xb5, 0x81, 0x8e,
	0xcf, 0x69, 0x7a, 0xc2, 0x3c, 0x8a, 0x3f, 0x43, 0x8d, 0x3d, 0xd8, 0x25, 0x9e, 0x53, 0xbc, 0x33,
	0x37, 0xb2, 0xfa, 0xdf, 0xff, 0xf6, 0xc7, 0xd3, 0x9a, 0x65, 0x5d, 0xb7, 0x8b, 0xa3, 0xcf, 0x7e,
	0x5c, 0x3a, 0x17, 0x9f, 0xa8, 0xf7, 0xd4, 0x2d, 0x6d, 0x0b, 0x7f, 0x8c, 0x1a, 0x0f, 0xe1, 0xfe,
	0xbb, 0x14, 0x6f, 0x0d, 0xf0, 0x56, 0x3a, 0x86, 0x9a, 0x68, 0x3f, 0x66, 0xfe, 0x13, 0x39, 0xfb,
	0x13, 0xb4, 0x70, 0x40, 0x05, 0x5e, 0xcb, 0x83, 0x2b, 0xd7, 0x4d, 0x05, 0xe4, 0x0d, 0x00, 0x59,
	0xc2, 0x65, 0x10, 0x7c, 0x0f, 0x35, 0xf6, 0x69, 0x48, 0x05, 0x7d, 0x21, 0xc8, 0xda, 0x40, 0x3d,
	0xce, 0x06, 0xc5, 0xcb, 0x6d, 0xf0, 0xa9, 0x7c, 0xb9, 0x15, 0x70, 0x5b, 0x73, 0x70, 0x71, 0xa9,
	0x54, 0x76, 0xa7, 0x77, 0x78, 0x26, 0x46, 0xfb, 0xf8, 0xad, 0x1c, 0xb9, 0x7a, 0xd3, 0x75, 0xcc,
	0x8b, 0x0e, 0x55, 0x5d, 0xd6, 0xbb, 0x00, 0xde, 0xc3, 0xdd, 0x4b, 0x09, 0xcc, 0xf0, 0x43, 0xd4,
	0xcc, 0x93, 0x16, 0x6f, 0x54, 0xc1, 0x2a, 0x27, 0xfb, 0x25, 0xab, 0x2d, 0xc3, 0x6a, 0x3a, 0x6e,
	0x16, 0xb0, 0x11, 0x32, 0x0e, 0xa8, 0xd8, 0x9d, 0xca, 0xd0, 0xd1, 0x3e, 0x5e, 0xaf, 0xce, 0x2c,
	0x1d, 0x7f, 0x97, 0xc0, 0xbe, 0x07, 0xb0, 0x9b, 0x9d, 0x6b, 0x39, 0x43, 0xa5, 0x93, 0x66, 0x3c,
	0x75, 0xd5, 0xeb, 0xc3, 0xbf, 0xa5, 0x6d, 0xed, 0xfe, 0xa8, 0xfd, 0x30, 0x74, 0x70, 0x73, 0xa7,
	0x7e, 0x63, 0x70, 0x63, 0xf0, 0xe1, 0x96, 0x56, 0x4b, 0xf7, 0x91, 0x0e, 0x58, 0xbd, 0xe1, 0x83,
	0x11, 0xfe, 0xe8, 0xe5, 0x5f, 0x9c, 0xb0, 0xca, 0xb3, 0xb3, 0xae, 0xf6, 0xeb, 0x59, 0x57, 0xfb,
	0xfd, 0xac, 0xab, 0xfd, 0x72, 0xde, 0xd5, 0x9e, 0x9d, 0x77, 0xb5, 0xaf, 0x5f, 0x15, 0x6c, 0xdc,
	0x00, 0xfd, 0x6f, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xc1, 0x9d, 0xbc, 0x12, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotelServiceClient interface {
	Create(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error)
	Update(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error)
	Get(ctx context.Context, in *OneHotelRequest, opts ...grpc.CallOption) (*Hotel, error)
	Delete(ctx context.Context, in *OneHotelRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListHotelByHostID(ctx context.Context, in *ListHotelRequest, opts ...grpc.CallOption) (*ListHotelResponse, error)
	ListAll(ctx context.Context, in *ListHotelCustomerRequest, opts ...grpc.CallOption) (*ListHotelResponse, error)
	GetByListID(ctx context.Context, in *ListHotelByIDRequest, opts ...grpc.CallOption) (*ListHotelResponse, error)
}

type hotelServiceClient struct {
	cc *grpc.ClientConn
}

func NewHotelServiceClient(cc *grpc.ClientConn) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) Create(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error) {
	out := new(Hotel)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Update(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error) {
	out := new(Hotel)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Get(ctx context.Context, in *OneHotelRequest, opts ...grpc.CallOption) (*Hotel, error) {
	out := new(Hotel)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Delete(ctx context.Context, in *OneHotelRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ListHotelByHostID(ctx context.Context, in *ListHotelRequest, opts ...grpc.CallOption) (*ListHotelResponse, error) {
	out := new(ListHotelResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/ListHotelByHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ListAll(ctx context.Context, in *ListHotelCustomerRequest, opts ...grpc.CallOption) (*ListHotelResponse, error) {
	out := new(ListHotelResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetByListID(ctx context.Context, in *ListHotelByIDRequest, opts ...grpc.CallOption) (*ListHotelResponse, error) {
	out := new(ListHotelResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/GetByListID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
type HotelServiceServer interface {
	Create(context.Context, *Hotel) (*Hotel, error)
	Update(context.Context, *Hotel) (*Hotel, error)
	Get(context.Context, *OneHotelRequest) (*Hotel, error)
	Delete(context.Context, *OneHotelRequest) (*types.Empty, error)
	ListHotelByHostID(context.Context, *ListHotelRequest) (*ListHotelResponse, error)
	ListAll(context.Context, *ListHotelCustomerRequest) (*ListHotelResponse, error)
	GetByListID(context.Context, *ListHotelByIDRequest) (*ListHotelResponse, error)
}

// UnimplementedHotelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (*UnimplementedHotelServiceServer) Create(ctx context.Context, req *Hotel) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedHotelServiceServer) Update(ctx context.Context, req *Hotel) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedHotelServiceServer) Get(ctx context.Context, req *OneHotelRequest) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedHotelServiceServer) Delete(ctx context.Context, req *OneHotelRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedHotelServiceServer) ListHotelByHostID(ctx context.Context, req *ListHotelRequest) (*ListHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotelByHostID not implemented")
}
func (*UnimplementedHotelServiceServer) ListAll(ctx context.Context, req *ListHotelCustomerRequest) (*ListHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (*UnimplementedHotelServiceServer) GetByListID(ctx context.Context, req *ListHotelByIDRequest) (*ListHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByListID not implemented")
}

func RegisterHotelServiceServer(s *grpc.Server, srv HotelServiceServer) {
	s.RegisterService(&_HotelService_serviceDesc, srv)
}

func _HotelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Create(ctx, req.(*Hotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Update(ctx, req.(*Hotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Get(ctx, req.(*OneHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Delete(ctx, req.(*OneHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ListHotelByHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ListHotelByHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/ListHotelByHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ListHotelByHostID(ctx, req.(*ListHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ListAll(ctx, req.(*ListHotelCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetByListID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetByListID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/GetByListID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetByListID(ctx, req.(*ListHotelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HotelService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HotelService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HotelService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HotelService_Delete_Handler,
		},
		{
			MethodName: "ListHotelByHostID",
			Handler:    _HotelService_ListHotelByHostID_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _HotelService_ListAll_Handler,
		},
		{
			MethodName: "GetByListID",
			Handler:    _HotelService_GetByListID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel/hotel.proto",
}

func (m *Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ListComment) > 0 {
		for iNdEx := len(m.ListComment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListComment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHotel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.CustomerId != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.CustomerId))
		i--
		dAtA[i] = 0x68
	}
	if m.AddressId != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.AddressId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ListImage) > 0 {
		for iNdEx := len(m.ListImage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListImage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHotel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rate))))
		i--
		dAtA[i] = 0x2d
	}
	if m.IsAvailable {
		i--
		if m.IsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StarLevel != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.StarLevel))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OneHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Checkout) > 0 {
		i -= len(m.Checkout)
		copy(dAtA[i:], m.Checkout)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Checkout)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CheckIn) > 0 {
		i -= len(m.CheckIn)
		copy(dAtA[i:], m.CheckIn)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CheckIn)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RoomType) > 0 {
		i -= len(m.RoomType)
		copy(dAtA[i:], m.RoomType)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.RoomType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.CustomerId != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.CustomerId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelCustomerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelCustomerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelCustomerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StarLevel) > 0 {
		i -= len(m.StarLevel)
		copy(dAtA[i:], m.StarLevel)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.StarLevel)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Checkout) > 0 {
		i -= len(m.Checkout)
		copy(dAtA[i:], m.Checkout)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Checkout)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CheckIn) > 0 {
		i -= len(m.CheckIn)
		copy(dAtA[i:], m.CheckIn)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CheckIn)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RoomType) > 0 {
		i -= len(m.RoomType)
		copy(dAtA[i:], m.RoomType)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.RoomType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ListHotelId) > 0 {
		dAtA3 := make([]byte, len(m.ListHotelId)*10)
		var j2 int
		for _, num1 := range m.ListHotelId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintHotel(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPage != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.MaxPage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHotel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAllHotelWithFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAllHotelWithFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAllHotelWithFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoomType) > 0 {
		i -= len(m.RoomType)
		copy(dAtA[i:], m.RoomType)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.RoomType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CheckOut) > 0 {
		i -= len(m.CheckOut)
		copy(dAtA[i:], m.CheckOut)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CheckOut)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CheckIn) > 0 {
		i -= len(m.CheckIn)
		copy(dAtA[i:], m.CheckIn)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CheckIn)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintHotel(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintHotel(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func encodeVarintHotel(dAtA []byte, offset int, v uint64) int {
	offset -= sovHotel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHotel(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.StarLevel != 0 {
		n += 1 + sovHotel(uint64(m.StarLevel))
	}
	if m.IsAvailable {
		n += 2
	}
	if m.Rate != 0 {
		n += 5
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovHotel(uint64(l))
	}
	if len(m.ListImage) > 0 {
		for _, e := range m.ListImage {
			l = e.Size()
			n += 1 + l + sovHotel(uint64(l))
		}
	}
	if m.AddressId != 0 {
		n += 1 + sovHotel(uint64(m.AddressId))
	}
	if m.CustomerId != 0 {
		n += 1 + sovHotel(uint64(m.CustomerId))
	}
	if len(m.ListComment) > 0 {
		for _, e := range m.ListComment {
			l = e.Size()
			n += 1 + l + sovHotel(uint64(l))
		}
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovHotel(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovHotel(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHotel(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.CustomerId != 0 {
		n += 1 + sovHotel(uint64(m.CustomerId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.RoomType)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CheckIn)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Checkout)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelCustomerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovHotel(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHotel(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.RoomType)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CheckIn)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Checkout)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.StarLevel)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovHotel(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHotel(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if len(m.ListHotelId) > 0 {
		l = 0
		for _, e := range m.ListHotelId {
			l += sovHotel(uint64(e))
		}
		n += 1 + sovHotel(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovHotel(uint64(l))
		}
	}
	if m.MaxPage != 0 {
		n += 1 + sovHotel(uint64(m.MaxPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovHotel(uint64(m.TotalCount))
	}
	if m.Page != 0 {
		n += 1 + sovHotel(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHotel(uint64(m.Limit))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAllHotelWithFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovHotel(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHotel(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CheckIn)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.CheckOut)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	l = len(m.RoomType)
	if l > 0 {
		n += 1 + l + sovHotel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHotel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHotel(x uint64) (n int) {
	return sovHotel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarLevel", wireType)
			}
			m.StarLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAvailable = bool(v != 0)
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rate = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &address.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListImage = append(m.ListImage, &image.Image{})
			if err := m.ListImage[len(m.ListImage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListComment = append(m.ListComment, &comment.Comment{})
			if err := m.ListComment[len(m.ListComment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			m.CustomerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelCustomerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelCustomerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelCustomerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StarLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ListHotelId = append(m.ListHotelId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHotel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHotel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ListHotelId) == 0 {
					m.ListHotelId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHotel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ListHotelId = append(m.ListHotelId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ListHotelId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Hotel{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPage", wireType)
			}
			m.MaxPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAllHotelWithFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAllHotelWithFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAllHotelWithFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHotel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHotel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHotel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHotel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHotel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHotel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHotel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHotel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHotel = fmt.Errorf("proto: unexpected end of group")
)
