// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: classify/classify.proto

package classify

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Classify struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Emotion              string   `protobuf:"bytes,2,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Service              string   `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	AmenityAndLeisure    string   `protobuf:"bytes,4,opt,name=amenity_and_leisure,json=amenityAndLeisure,proto3" json:"amenity_and_leisure,omitempty"`
	Room                 string   `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"`
	Location             string   `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Cuisine              string   `protobuf:"bytes,7,opt,name=cuisine,proto3" json:"cuisine,omitempty"`
	Cost                 string   `protobuf:"bytes,8,opt,name=cost,proto3" json:"cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Classify) Reset()         { *m = Classify{} }
func (m *Classify) String() string { return proto.CompactTextString(m) }
func (*Classify) ProtoMessage()    {}
func (*Classify) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae263e278d7a3cc, []int{0}
}
func (m *Classify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Classify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Classify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Classify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Classify.Merge(m, src)
}
func (m *Classify) XXX_Size() int {
	return m.Size()
}
func (m *Classify) XXX_DiscardUnknown() {
	xxx_messageInfo_Classify.DiscardUnknown(m)
}

var xxx_messageInfo_Classify proto.InternalMessageInfo

func (m *Classify) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Classify) GetEmotion() string {
	if m != nil {
		return m.Emotion
	}
	return ""
}

func (m *Classify) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Classify) GetAmenityAndLeisure() string {
	if m != nil {
		return m.AmenityAndLeisure
	}
	return ""
}

func (m *Classify) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

func (m *Classify) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Classify) GetCuisine() string {
	if m != nil {
		return m.Cuisine
	}
	return ""
}

func (m *Classify) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (*Classify) XXX_MessageName() string {
	return "classify.Classify"
}
func init() {
	proto.RegisterType((*Classify)(nil), "classify.Classify")
	golang_proto.RegisterType((*Classify)(nil), "classify.Classify")
}

func init() { proto.RegisterFile("classify/classify.proto", fileDescriptor_8ae263e278d7a3cc) }
func init() { golang_proto.RegisterFile("classify/classify.proto", fileDescriptor_8ae263e278d7a3cc) }

var fileDescriptor_8ae263e278d7a3cc = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe5, 0x52, 0xda, 0x90, 0x01, 0x09, 0x33, 0x60, 0x55, 0x28, 0x42, 0x4c, 0x0c, 0xa4,
	0x1e, 0xd8, 0xd8, 0x80, 0x95, 0x01, 0x31, 0xb2, 0x54, 0x8e, 0x73, 0x35, 0xa6, 0x89, 0x2f, 0x8a,
	0x1d, 0x50, 0xfb, 0x74, 0x8c, 0x1d, 0x79, 0x00, 0x06, 0xd4, 0xbe, 0x08, 0xca, 0x25, 0xad, 0x90,
	0x98, 0xf2, 0x7f, 0xf7, 0xff, 0xb9, 0x3b, 0x9d, 0xe3, 0x33, 0x5d, 0x28, 0xef, 0xed, 0x7c, 0x29,
	0x77, 0x62, 0x5a, 0xd5, 0x18, 0x90, 0x47, 0x3b, 0x9e, 0xa4, 0xc6, 0x86, 0xd7, 0x26, 0x9b, 0x6a,
	0x2c, 0xa5, 0x41, 0x83, 0x92, 0x02, 0x59, 0x33, 0x27, 0x22, 0x20, 0xd5, 0xfd, 0x38, 0x39, 0x37,
	0x88, 0xa6, 0x00, 0xa9, 0x2a, 0x2b, 0x95, 0x73, 0x18, 0x54, 0xb0, 0xe8, 0x7c, 0xef, 0x5e, 0xd3,
	0x47, 0xa7, 0x06, 0x5c, 0xea, 0x3f, 0x94, 0x31, 0x50, 0x4b, 0xac, 0x28, 0xf1, 0x3f, 0x7d, 0xf9,
	0xcd, 0xe2, 0xe8, 0xa1, 0xdf, 0x83, 0x1f, 0xc7, 0x03, 0x9b, 0x0b, 0x76, 0xc1, 0xae, 0x8e, 0x9e,
	0x07, 0x36, 0xe7, 0x22, 0x1e, 0x43, 0x89, 0x6d, 0x5c, 0x0c, 0xa8, 0xb8, 0xc3, 0xd6, 0xf1, 0x50,
	0xbf, 0x5b, 0x0d, 0xe2, 0xa0, 0x73, 0x7a, 0xe4, 0xd3, 0xf8, 0x54, 0x95, 0xe0, 0x6c, 0x58, 0xce,
	0x94, 0xcb, 0x67, 0x05, 0x58, 0xdf, 0xd4, 0x20, 0x86, 0x94, 0x3a, 0xe9, 0xad, 0x3b, 0x97, 0x3f,
	0x76, 0x06, 0xe7, 0xf1, 0xb0, 0x46, 0x2c, 0xc5, 0x21, 0x05, 0x48, 0xf3, 0x49, 0x1c, 0x15, 0xa8,
	0x69, 0x4f, 0x31, 0xa2, 0xfa, 0x9e, 0xdb, 0xc9, 0xba, 0xb1, 0xde, 0x3a, 0x10, 0xe3, 0x6e, 0x72,
	0x8f, 0x6d, 0x27, 0x8d, 0x3e, 0x88, 0xa8, 0xeb, 0xd4, 0xea, 0xfb, 0xa7, 0xf5, 0x26, 0x61, 0x5f,
	0x9b, 0x84, 0xfd, 0x6c, 0x12, 0xf6, 0xb9, 0x4d, 0xd8, 0x7a, 0x9b, 0xb0, 0x97, 0xdb, 0x3f, 0xf7,
	0x76, 0xb0, 0xb0, 0xab, 0x95, 0x9c, 0x5b, 0xa7, 0x8a, 0xb4, 0xaa, 0xf1, 0x0d, 0x74, 0x90, 0x99,
	0xd2, 0x0b, 0x70, 0xb9, 0x34, 0x98, 0x56, 0x59, 0x58, 0x56, 0xb0, 0x7f, 0xbb, 0x6c, 0x44, 0x77,
	0xbb, 0xf9, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x90, 0x8e, 0x1a, 0x91, 0xd7, 0x01, 0x00, 0x00,
}

func (m *Classify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Classify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cuisine) > 0 {
		i -= len(m.Cuisine)
		copy(dAtA[i:], m.Cuisine)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Cuisine)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Room) > 0 {
		i -= len(m.Room)
		copy(dAtA[i:], m.Room)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Room)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AmenityAndLeisure) > 0 {
		i -= len(m.AmenityAndLeisure)
		copy(dAtA[i:], m.AmenityAndLeisure)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.AmenityAndLeisure)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Emotion) > 0 {
		i -= len(m.Emotion)
		copy(dAtA[i:], m.Emotion)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Emotion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClassify(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassify(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassify(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Classify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Emotion)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.AmenityAndLeisure)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Room)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Cuisine)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovClassify(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClassify(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassify(x uint64) (n int) {
	return sovClassify(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Classify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emotion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emotion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmenityAndLeisure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmenityAndLeisure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cuisine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cuisine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassify(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassify
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassify
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassify
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassify
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassify        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassify          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassify = fmt.Errorf("proto: unexpected end of group")
)
